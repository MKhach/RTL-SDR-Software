import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from itertools import chain
import sys
import argparse

parser = argparse.ArgumentParser(description='Analyzes certain infromation from the .csv files generated by rtl_power')
parser.add_argument('-n', '--filename', help = 'Filename goes here')
parser.add_argument('-i', '--info', help = 'Gives information about the parameters of the scan', action='store_true')
parser.add_argument('-p', '--powerplot', help = 'Plots all the power levels of the scan (in dB)', action='store_true')
parser.add_argument('-v', '--specificvalue', help = 'Allows specification of a sweep and frequency', action='store_true')
parser.add_argument('-s', '--sweep', help = 'Gives the specific power level during the ith sweep')
parser.add_argument('-f', '--frequency', help = 'Gives the specific power level during the jth frequency')
args = parser.parse_args()

df=pd.read_csv(args.filename,header=None) #reads filename from command line into pandas csv analyzer

#example: df = pd.read_csv("example2.csv", header=None) 

#Section 1.1: Frequency array and vector generator

LowestHz = int(df.iloc[0, 2]) #This finds the starting frequency of the sweeps

HighestHz = int(df.iloc[-1, 3]) #the end frequency of the sweeps

HzStep = int(df.iloc[0, 4]) #the step size for each sweep

NumSamples = int(round(((HighestHz)-(LowestHz)) / (HzStep))) #the number of samples per sweep

hz_headers = df[2].values.tolist() #finds the total number of rows

#Section 1.2: Time array generator

number_sweeps = int((df.iloc[:,2] == LowestHz).sum()) #finds the number of sweeps that were completed

frequencies = np.empty([1, NumSamples])

for i in range(0, 1): #this is for generating an array of frequencies
     for j in range(0, NumSamples):
         frequencies[i][j] = (hz_headers[i] + j * HzStep)
        
freqlist = list(chain.from_iterable(frequencies)) #turns the frequencies into a list, useful later

freqarr = np.vstack([frequencies]*number_sweeps) #array of frequencies based on number of sweeps

#Section 1.3: Power level data

df2 = df.loc[:, 6:]

powerdf = pd.DataFrame(df2.values.reshape(number_sweeps, -1)) #a dataframe of the power levels

powerdf1d = pd.DataFrame(df2.values.reshape(1, -1)) #a collapsed 1D array of the above dataframe

powerarr = powerdf1d.values.tolist() #turns the above dataframe into a numpy array

powers = list(chain.from_iterable(powerarr)) #done for plotting purposes, like in freqlist

#Section 1.4: Info

info = "%d sweeps were completed in the frequency range [%d, %d] Hz, with a step size of %d Hz, giving a total of %d power measurements (in dB) per sweep." % (number_sweeps, LowestHz, HighestHz, HzStep, NumSamples)

#Section 1.5: Command Implementation

if args.powerplot:
     plt.plot(powers)
     plt.xlabel('Sample #')
     plt.ylabel('Power Level (dB)')
     plt.show()

if args.info:
    print(info)

if args.specificvalue:
     print(powerdf.iloc[int(args.sweep), int(args.frequency)])
